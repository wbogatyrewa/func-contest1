{-

TASK 5 - SHARED WALLET.

The aim of two owner wallet is to create smart-contract which send messages then and only then both owners (represented by public keys) authorized it.

TL-B schema of external message body accepted by wallet is as follows:
```
request#_ valid_until:uint32 mode:uint8 msg_to_send:^Cell = Request;
mdg_body#_ public_key:uint256 signature:(512 * Bit) request:^Request = MsgBody;
```

Where `signature` signs `Request` cell with some private key and `public_key` is corresponding public key.

`msg_to_send` is fully formed message which is ready to be accepted by `send_raw_message()`.

Any errors related to the incorrect `msg_to_send` may be ignored (in other words if something goes wrong due to owner's malformed message, it is owner's problem).

When wallet receive request signed by one owner it should store it in storage.

When wallet receives the same request signed by another owner it should process request, that means send `msg_to_send` with `mode` in the same transaction it got second signature.

If message body does not corresponds to `MsgBody` type described above, request is signed not by owner, contains incorrect signature or current time is higher than `valid_until`, request should be ignored (message should not be accepted). Note: absence of `accept_message` and throwing (with exit_code > 1) before `accept_message` are the same for external messages (since will result in ignoring that external message by any validator).

If the same request (regardless approved by one or both owners) is sent the second time it should be ignored.

It is acceptable to ignore requests which are valid for more than 1 minute as well as not accept more than 10 requests per minute.

Before running tests, storage for contract will be generated by `pack_data` with providing two public keys. Thus participants may intoduce their own storage layout.

-}

int equal_slices (slice a, slice b) asm "SDEQ";

(int, int, cell) load_data() {
  slice ds = get_data().begin_parse();
  int public_key1 = ds~load_uint(256);
  int public_key2 = ds~load_uint(256);
  cell requests_dict = new_dict();
  if (ds.slice_bits() != 0) {
    requests_dict = ds~load_dict();
  }
  return (public_key1, public_key2, requests_dict);
}

() save_data(int public_key1, int public_key2, cell requests_dict) impure inline { 
    set_data(begin_cell().store_uint(public_key1, 256).store_uint(public_key2, 256).store_dict(requests_dict).end_cell());
}

() recv_internal (slice in_msg_body) impure {
  ;; do nothing for internal messages
}

;; testable
() recv_external (slice in_msg_body) impure {

  ;; данные из внешнего сообщения
	var public_key = in_msg_body~load_uint(256);
  var signature = in_msg_body~load_bits(512);
  var request = in_msg_body~load_ref();
  var request_slice = request.begin_parse();
  var (valid_until, mode, msg_to_send) = (request_slice~load_uint(32), request_slice~load_uint(8), request_slice~load_ref());
  
  ;; проверка публичного и приватного ключа
  throw_unless(34, check_signature(slice_hash(in_msg_body), signature, public_key));

  ;; игнорируем запросы, действительные больше минуты
  throw_if(35, valid_until > 60);

  ;; данные из хранилища контракта
  (int public_key1, int public_key2, cell requests_dict) = load_data();

  ;; проверка на соответсвие владельца кошелька
  throw_if(34, (public_key != public_key1) | (public_key != public_key2));
  
  var flag1 = 0;
  var flag2 = 0;
  if (public_key == public_key1) {
    flag1 = -1;
  }
  else {
    flag2 = -1;
  }

  if (requests_dict.null?()) {
    requests_dict~udict_set_ref(256, public_key, request);
    save_data(public_key1, public_key2, requests_dict);
  }
  else {
    if (flag1) {
        do {
        (public_key2, slice req, int f) = requests_dict.udict_get_nexteq?(256, public_key2);
        if (f) {
          var eq_flag = equal_slices(req, request_slice);
          throw_if(34, eq_flag);
          ifnot (eq_flag) {
            if (equal_slices(req~load_ref().begin_parse(), msg_to_send.begin_parse())) {
              ;; sent msg
              throw_if(35, valid_until < now());
              send_raw_message(msg_to_send, mode);
            }
            else {
              ;; add to storage
              requests_dict~udict_set_ref(256, public_key, request);
              save_data(public_key1, public_key2, requests_dict);
            }
          } 
        }
      } until ( ~ f)
    }
    if (flag2) {
        do {
        (public_key1, slice req, int f) = requests_dict.udict_get_nexteq?(256, public_key1);
        if (f) {
          var eq_flag = equal_slices(req, request_slice);
          throw_if(34, eq_flag);
          ifnot (eq_flag) {
            if (equal_slices(req~load_ref().begin_parse(), msg_to_send.begin_parse())) {
              ;; sent msg
              throw_if(35, valid_until < now());
              send_raw_message(msg_to_send, mode);
            }
            else {
              ;; add to storage
              requests_dict~udict_set_ref(256, public_key, request);
              save_data(public_key1, public_key2, requests_dict);
            }
          } 
        }
      } until ( ~ f)
    }
  }
}

;; testable
cell pack_data(int public_key1, int public_key2) method_id {
  ;; в хранилище содержатся публичные ключи владельцев и словарь (публичный ключ/запрос)
  ;; изначально словарь пуст
  cell requests_dict = new_dict();
  return begin_cell().store_uint(public_key1, 256).store_uint(public_key2, 256).store_dict(requests_dict).end_cell();
}
{-

TASK 4 - HASHMAP STORAGE.

* Add-new-entry message has the following structure:
    * 32-bit unsigined `op` equal to 1
    * 64-bit unsigned `query_id`
    * 256-bit unsgined key
    * 64-bit `valid_until` unixtime
    * the rest slice is the value

    Upon receipt of such a message, the contract must add a new key/value entry to its data.
    Contract storage format is arbitrary, you are free to change it.

* Remove-outdated message has the following stucture:
    * 32-bit unsigined `op` equal to 2
    * 64-bit unsigned `query_id`

    Upon receipt of such a message, the contract must delete all otudated entries from its data (those with `valid_until` < now()).

* For all other internal messages an error should be thrown

* Get-method `get_key` accepts 256-bit unsignied key and should return `valid_until` integer and value data slice for this key.

  If there is no entry for this key then an error should be thrown.

* Tests will initially run with empty storage

-}

(cell, cell) load_data() {
    slice ds = get_data().begin_parse();
    if (ds.slice_bits() == 0) {
        return (null(), null());
    } else {
        return (ds~load_dict(), ds~load_dict());
    }
}

() save_data(cell data_dict, cell valid_until_dict) impure inline { ;; add inline
    set_data(begin_cell().store_dict(data_dict).store_dict(valid_until_dict).end_cell());
}

;; testable
() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure { ;; add impure
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    throw_if(34, (op != 1) | (op != 2)); ;; throw

    (cell data_dict, cell valid_until_dict) = load_data();

    if (op == 1) { ;; add new entry

      int key = in_msg_body~load_uint(256);
      int valid_until = in_msg_body~load_uint(64);
      slice value = in_msg_body;
      
      ;; if key exists replace entry
      int data_dict_flag = data_dict~udict_replace?(256, key, value); 
      if (data_dict_flag == 0) {
        data_dict~udict_set(256, key, value);
      }

      int valid_until_flag = valid_until_dict~udict_replace_builder?(256, key, begin_cell().store_uint(valid_until, 64));
      if (valid_until_flag == 0) {
        valid_until_dict~udict_set_ref(256, key, begin_cell().store_uint(valid_until, 64).end_cell());
      }
            
    }

    if (op == 2) { ;; remove outdated

        int key = -1;
         do {
           (key, slice cs, int f) = valid_until_dict.udict_get_next?(256, key); ;; valid_until_dict
           if (f) {
              int valid_until = cs~load_uint(64);
              if (valid_until < now()) {
                valid_until_dict~udict_delete?(256, key); ;; valid_until_dict
                data_dict~udict_delete?(256, key);
              }
           }
         } until (~ f);

    }

    save_data(data_dict, valid_until_dict);
}

;; testable
(int, slice) get_key(int key) method_id {
    (cell data_dict, cell valid_until_dict) = load_data();
    var (valid_until_cell, valid_until_flag) = valid_until_dict.udict_get_ref?(256, key);

    throw_if(34, valid_until_flag == 0);

    slice valid_until_slice = valid_until_cell.begin_parse();
    int valid_until = valid_until_slice~load_uint(64);

    (slice value, _)= data_dict.udict_get?(256, key);

    return (valid_until, value);
}